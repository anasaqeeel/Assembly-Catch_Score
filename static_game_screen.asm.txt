[org 0x0100]
jmp start
s1: db 'TIME : 00:00::00 ','o'
s2: db 'SCORE : 0000 ','o'
s3: db 'TNT!','o'

clr:
mov ax,0xb800
mov es,ax
mov ax,0x0720
mov di,0
mov cx,4000
rep stosw
ret

strlen:
push bp
mov bp,sp
mov ax,ds
mov es,ax
mov ax,'o'
mov di,[bp+4]
mov cx,0xffff
repne scasb

mov ax,0xffff
sub ax,cx
mov cx,ax
dec cx

pop bp
ret 2

back:
push ax
push es
push di
mov ax,0xb800
mov es,ax
mov ax,0xBB20
mov di,0

l1:
mov word[es:di],ax
add di,2
cmp di,4000
jne l1

pop di
pop es
pop ax
ret

bottom:
push ax
push es
push di
mov ax,0xb800
mov es,ax
mov ax,80
mov bx,3
mul bx
shl ax,1
mov di,4000
sub di,ax
mov ax,0x6E20

l2:
mov word[es:di],ax
add di,2
cmp di,4000
jne l2

pop di
pop es
pop ax

ret

time_score:
push si
push di
push cx
push bp
mov bp,sp

mov ax,s1
push ax
call strlen

mov si,[bp+12]  ; loading s1
mov di,160
mov ax,0xb800
mov es,ax
mov ah,0x0A

l3:
lodsb
stosw
loop l3


mov ax,s2
push ax
call strlen

mov di,318
shl cx,1
sub di,cx
shr cx,1
add di,2
mov si,[bp+10]  ; loading s2
mov ax,0xb800
mov es,ax
mov ah,0x0A

l4:
lodsb
stosw
loop l4


pop bp
pop cx
pop di
pop si
ret 6

bucket:
push ax
push cx
push si 
push di
mov ax,0xb800
mov es,ax
mov di,2870
sub di,240
mov ax,0x4FCD

mov cx,0
l5:
stosw
add di,160
sub di,2
inc cx
cmp cx,3
jne l5
mov cx,10
cld 
mov ax,0x4FCD
rep stosw
sub di,160
sub di,2
mov cx,0
l6:
stosw
sub di,160
sub di,2
inc cx
cmp cx,3
jne l6

pop di 
pop si 
pop cx
pop ax
ret

gem1:
push ax
push es
push di
push cx
push bp
mov bp,sp
mov ax,0xb800
mov es,ax
mov ax,0x4fb0
mov di,[bp+12]
mov cx,3
rep stosw
add di,160
sub di,2
std
mov cx,3
rep stosw

pop bp
pop cx
pop di
pop es
pop ax
ret 4

tnt:
push ax
push es
push di
push si
push cx
push bp
mov bp,sp
mov ax,0xb800
mov di,[bp+14]
add di,2
mov es,ax
mov cx,2
mov ax,0x0720

std
rep stosw
cld

mov ax,[bp+16]
push ax
call strlen
dec cx
mov ax,0xb800
mov es,ax
mov ah,0x07
mov di,[bp+14]
mov si,[bp+16]

l9
lodsb 
stosw
loop l9

mov ax,0x0720
add di,160
std 
mov cx,5
rep stosw

mov cx,2
l10:
sub di,160
add di,2
stosw 
loop l10
cld
add di,2
mov cx,5
rep stosw

mov cx,2
cld
l11
add di,160
sub di,2
stosw
loop l11




pop bp
pop cx
pop si
pop di
pop es
pop ax
ret 4


dim:
mov ax,0xb800
mov es,ax
mov di,990
mov ax,0x4f2e
mov cx,1
cld
stosw
add di,160
sub di,4
mov cx,3
rep stosw
add di,160
sub di,4
stosw
ret

cir:
mov ax,0xb800
mov es,ax
mov di,2700
mov ax,0x4f7f
cld 
mov dx,4
mov cx,4

k1:
stosw
add di,160 
sub di,cx  
sub cx,2
dec dx
jnz k1



mov cx,2
sub di,320
sub di,2
stosw
sub di,160
sub di,2
stosw

mov ax,0x4fc9
sub di,160
sub di,8
add di,160
stosw
mov ax,0x4fc8
add di,160
sub di,2
stosw
add di,6
mov ax,0x4fbc
stosw
sub di,160
sub di,2
mov ax,0x4fbb
stosw
mov ax,0x4f00

sub di,6
stosw

add di,160
sub di,2

mov ax,0x4f00
stosw


ret

start:

call clr
call back
call bottom

mov ax,s1
push ax
mov ax,s2
push ax

call time_score
call bucket




cld
mov ax,1996
push ax
call gem1
mov ax,2200
cld


cld
mov ax,s3
push ax
mov ax,1410
push ax
call tnt

cld
mov ax,s3
push ax
mov ax,2100
push ax
call tnt


call dim
call cir


mov ax,0x4c00
int 0x21